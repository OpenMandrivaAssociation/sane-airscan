From 601f7e7b1329bfd6d41ffc5ff540a197e5aa9322 Mon Sep 17 00:00:00 2001
From: Alexander Pevzner <pzz@apevzner.com>
Date: Fri, 6 May 2022 01:31:35 +0300
Subject: [PATCH 22/36] Ignore HTTP I/O error, if headers received and body is
 not needed (see #163)

    Kyocera ECOSYS M6526cdn, when accessed via HTTPS, sometimes
    drops the TLS connection after sending response HTTP headers,
    but before the body transfer is completed.

    This change attempts to work around this problem.
---
 airscan-escl.c | 11 +++++++++++
 airscan-http.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++++++
 airscan.h      | 11 +++++++++++
 3 files changed, 73 insertions(+)

diff --git a/airscan-escl.c b/airscan-escl.c
index 659b4ef..5721cf5 100644
--- a/airscan-escl.c
+++ b/airscan-escl.c
@@ -781,6 +781,17 @@ escl_scan_query (const proto_ctx *ctx)
     query = escl_http_query(ctx, "ScanJobs", "POST",
         xml_wr_finish_compact(xml));
 
+    /* Kyocera ECOSYS M6526cdn drops TLS connection after sending
+     * response HTTP headers, but before the body transfer is completed.
+     *
+     * As for this request we are only interested in the response
+     * headers, we can ignore this kind of error
+     *
+     * See here for details:
+     *   https://github.com/alexpevzner/sane-airscan/issues/163
+     */
+    http_query_no_need_response_body(query);
+
     /* It's a dirty hack
      *
      * HP LaserJet MFP M630, HP Color LaserJet FlowMFP M578 and
diff --git a/airscan-http.c b/airscan-http.c
index 927aab1..06d68ce 100644
--- a/airscan-http.c
+++ b/airscan-http.c
@@ -1985,6 +1985,9 @@ struct http_query {
     eloop_timer       *timeout_timer;           /* Timeout timer */
     int               timeout_value;            /* In milliseconds */
 
+    /* Miscellaneous options */
+    bool              no_need_response_body;    /* Response body not needed */
+
     /* Low-level I/O */
     bool              submitted;                /* http_query_submit() called */
     uint64_t          eloop_callid;             /* For eloop_call_cancel */
@@ -2004,6 +2007,7 @@ struct http_query {
 
     /* HTTP parser */
     http_parser       http_parser;              /* HTTP parser structure */
+    bool              http_headers_received;    /* HTTP headers received */
     bool              http_parser_done;         /* Message parsing done */
 
     /* Data handling */
@@ -2068,6 +2072,7 @@ http_query_reset (http_query *q)
     str_trunc(q->rq_buf);
     q->rq_off = 0;
 
+    q->http_headers_received = false;
     q->http_parser_done = false;
 
     http_data_unref(q->response_data);
@@ -2268,6 +2273,20 @@ http_query_timeout (http_query *q, int timeout)
     }
 }
 
+/* Set 'no_need_response_body' flag
+ *
+ * This flag notifies, that http_query issued is only interested
+ * in the HTTP response headers, not body
+ *
+ * If this flag is set, after successful reception of response
+ * HTTP header, errors in fetching response body is ignored
+ */
+void
+http_query_no_need_response_body (http_query *q)
+{
+    q->no_need_response_body = true;
+}
+
 /* Cancel query timeout timer
  */
 static void
@@ -2408,6 +2427,29 @@ http_query_redirect (http_query *q, const char *method)
     return NULL;
 }
 
+/* Check if I/O error should be ignored for this query
+ */
+static bool
+http_query_ignore_error (http_query *q)
+{
+    int status;
+
+    /* Headers must be received */
+    if (!q->http_headers_received) {
+        return false;
+    }
+
+    /* Depending on HTTP status, response body may be irrelevant */
+    status = q->http_parser.status_code;
+    switch (status / 100) {
+        case 1: case 3: case 4: case 5:
+            return true;
+    }
+
+    /* If `no_need_response_body' is set, ignore the error */
+    return q->no_need_response_body;
+}
+
 /* Complete query processing
  */
 static void
@@ -2421,6 +2463,13 @@ http_query_complete (http_query *q, error err)
     /* Unlink query from a client */
     ll_del(&q->chain);
 
+    /* In some cases, I/O error can be ignored. Check for that */
+    if (err != NULL && http_query_ignore_error(q)) {
+        log_debug(client->log, "HTTP %s %s: %s (ignored)", q->method,
+                http_uri_str(q->uri), ESTRING(err));
+        err = NULL;
+    }
+
     /* Issue log messages */
     q->err = err;
     if (err != NULL) {
@@ -2506,6 +2555,8 @@ http_query_on_headers_complete (http_parser *parser)
                 http_uri_str(q->uri),
                 http_query_status(q));
 
+        q->http_headers_received = true;
+
         if (q->onrxhdr != NULL) {
             q->onrxhdr(q->client->ptr, q);
         }
diff --git a/airscan.h b/airscan.h
index 894401e..ac6b214 100644
--- a/airscan.h
+++ b/airscan.h
@@ -1827,6 +1827,17 @@ http_query_new_relative(http_client *client,
 void
 http_query_timeout (http_query *q, int timeout);
 
+/* Set 'no_need_response_body' flag
+ *
+ * This flag notifies, that http_query issued is only interested
+ * in the HTTP response headers, not body
+ *
+ * If this flag is set, after successful reception of response
+ * HTTP header, errors in fetching response body is ignored
+ */
+void
+http_query_no_need_response_body (http_query *q);
+
 /* Set forcing port to be added to the Host header for this query.
  *
  * This function may be called multiple times (each subsequent call overrides
-- 
2.40.0.rc0

